// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoreNote.Logic.DB;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MoreNote.Logic.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210710003849_password_hash2")]
    partial class password_hash2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MoreNote.Logic.Entity.AccessRecords", b =>
                {
                    b.Property<long?>("AccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("access_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AccessTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("access_time");

                    b.Property<string>("IP")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Referrer")
                        .HasColumnType("text")
                        .HasColumnName("referrer");

                    b.Property<string>("RemoteIPAddress")
                        .HasColumnType("text")
                        .HasColumnName("remote_ip_address");

                    b.Property<string>("RemotePort")
                        .HasColumnType("text")
                        .HasColumnName("remote_port");

                    b.Property<string>("RequestHeader")
                        .HasColumnType("text")
                        .HasColumnName("request_header");

                    b.Property<long?>("TimeInterval")
                        .HasColumnType("bigint")
                        .HasColumnName("time_interval");

                    b.Property<string>("URL")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<long?>("UnixTime")
                        .HasColumnType("bigint")
                        .HasColumnName("unix_time");

                    b.Property<string>("X_Forwarded_For")
                        .HasColumnType("text")
                        .HasColumnName("x_forwarded_for");

                    b.Property<string>("X_Real_IP")
                        .HasColumnType("text")
                        .HasColumnName("x_real_ip");

                    b.HasKey("AccessId");

                    b.ToTable("access_records");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Album", b =>
                {
                    b.Property<long?>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("album_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SEQ")
                        .HasColumnType("integer")
                        .HasColumnName("seq");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("AlbumId");

                    b.ToTable("album");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.AppInfo", b =>
                {
                    b.Property<long?>("appid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("appautor")
                        .HasColumnType("text");

                    b.Property<string>("appdetail")
                        .HasColumnType("text");

                    b.Property<string>("appdownurl")
                        .HasColumnType("text");

                    b.Property<string>("applogourl")
                        .HasColumnType("text");

                    b.Property<string>("appname")
                        .HasColumnType("text");

                    b.Property<string>("apppackage")
                        .HasColumnType("text");

                    b.Property<string>("appsize")
                        .HasColumnType("text");

                    b.Property<string>("appversion")
                        .HasColumnType("text");

                    b.Property<string[]>("imglist")
                        .HasColumnType("text[]");

                    b.HasKey("appid");

                    b.ToTable("app_info");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.AttachInfo", b =>
                {
                    b.Property<long?>("AttachId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("attach_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("NoteId")
                        .HasColumnType("bigint")
                        .HasColumnName("note_id");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("StorageType")
                        .HasColumnType("integer")
                        .HasColumnName("storage_type");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<long?>("UploadUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("upload_user_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("AttachId");

                    b.ToTable("attach_info");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Authorization", b =>
                {
                    b.Property<long?>("AuthorizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("authorization_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AuthorizationType")
                        .HasColumnType("text")
                        .HasColumnName("authorization_type");

                    b.Property<string>("AuthorizationValue")
                        .HasColumnType("text")
                        .HasColumnName("authorization_value");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("AuthorizationId");

                    b.HasIndex("UserId");

                    b.ToTable("authorization");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.BlogComment", b =>
                {
                    b.Property<long?>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Allow")
                        .HasColumnType("boolean")
                        .HasColumnName("allow");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<int>("LikeNum")
                        .HasColumnType("integer")
                        .HasColumnName("like_num");

                    b.Property<long?[]>("LikeUserIds")
                        .HasColumnType("bigint[]")
                        .HasColumnName("like_user_ids");

                    b.Property<long?>("NoteId")
                        .HasColumnType("bigint")
                        .HasColumnName("note_id");

                    b.Property<long?>("ToCommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("to_comment_id");

                    b.Property<long?>("ToUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("to_user_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId");

                    b.ToTable("blog_comment");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.BlogCommentPublic", b =>
                {
                    b.Property<long?>("BlogCommentPublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("blog_comment_public_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsILikeIt")
                        .HasColumnType("boolean")
                        .HasColumnName("is_i_like_it");

                    b.HasKey("BlogCommentPublicId");

                    b.ToTable("blog_comment_public");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.BlogInfoCustom", b =>
                {
                    b.Property<long?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CommentType")
                        .HasColumnType("text")
                        .HasColumnName("comment_type");

                    b.Property<string>("Domain")
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("OpenComment")
                        .HasColumnType("text")
                        .HasColumnName("open_comment");

                    b.Property<string>("SubDomain")
                        .HasColumnType("text")
                        .HasColumnName("sub_domain");

                    b.Property<string>("SubTitle")
                        .HasColumnType("text")
                        .HasColumnName("sub_title");

                    b.Property<string>("ThemeId")
                        .HasColumnType("text")
                        .HasColumnName("theme_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("UserLogo")
                        .HasColumnType("text")
                        .HasColumnName("user_logo");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("blog_info_custom");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.BlogLike", b =>
                {
                    b.Property<long?>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("like_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<long?>("NoteId")
                        .HasColumnType("bigint")
                        .HasColumnName("note_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("LikeId");

                    b.ToTable("blog_like");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.BlogSingle", b =>
                {
                    b.Property<long?>("SingleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("single_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("text")
                        .HasColumnName("url_title");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("SingleId");

                    b.ToTable("blog_single");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.BlogStat", b =>
                {
                    b.Property<long?>("NodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("node_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CommentNum")
                        .HasColumnType("integer")
                        .HasColumnName("comment_num");

                    b.Property<int>("LikeNum")
                        .HasColumnType("integer")
                        .HasColumnName("like_num");

                    b.Property<int>("ReadNum")
                        .HasColumnType("integer")
                        .HasColumnName("read_num");

                    b.HasKey("NodeId");

                    b.ToTable("blog_stat");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Cate", b =>
                {
                    b.Property<long?>("CateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("cate_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("CateId1")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentCateId")
                        .HasColumnType("text")
                        .HasColumnName("parent_cate_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("text")
                        .HasColumnName("url_title");

                    b.HasKey("CateId");

                    b.HasIndex("CateId1");

                    b.ToTable("cate");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.CommodityOrder", b =>
                {
                    b.Property<long?>("CommodityOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("commodity_order_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NativeRequestMessage")
                        .HasColumnType("text")
                        .HasColumnName("native_request_message");

                    b.Property<string>("NativeResponseMessage")
                        .HasColumnType("text")
                        .HasColumnName("native_response_message");

                    b.Property<bool>("Notify")
                        .HasColumnType("boolean")
                        .HasColumnName("notify");

                    b.Property<string>("NotifyResponseMessage")
                        .HasColumnType("text")
                        .HasColumnName("notify_response_message");

                    b.Property<bool>("PayStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("pay_status");

                    b.Property<bool>("Refund")
                        .HasColumnType("boolean")
                        .HasColumnName("re_fund");

                    b.Property<string>("attch")
                        .HasColumnType("text")
                        .HasColumnName("attch");

                    b.Property<string>("body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("mchid")
                        .HasColumnType("text")
                        .HasColumnName("mchid");

                    b.Property<string>("notify_url")
                        .HasColumnType("text")
                        .HasColumnName("notify_url");

                    b.Property<string>("openid")
                        .HasColumnType("text")
                        .HasColumnName("openid");

                    b.Property<string>("out_trade_no")
                        .HasColumnType("text")
                        .HasColumnName("out_trade_no");

                    b.Property<string>("payjs_order_id")
                        .HasColumnType("text")
                        .HasColumnName("payjs_order_id");

                    b.Property<int>("total_fee")
                        .HasColumnType("integer")
                        .HasColumnName("total_fee");

                    b.Property<string>("transaction_id")
                        .HasColumnType("text")
                        .HasColumnName("transaction_id");

                    b.Property<string>("type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("CommodityOrderId");

                    b.ToTable("commodity_order");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Config", b =>
                {
                    b.Property<long?>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("config_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("ValueStr")
                        .HasColumnType("text")
                        .HasColumnName("value_str");

                    b.HasKey("ConfigId");

                    b.ToTable("config");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.EmailLog", b =>
                {
                    b.Property<long?>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("log_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Msg")
                        .HasColumnType("text")
                        .HasColumnName("msg");

                    b.Property<bool>("Ok")
                        .HasColumnType("boolean")
                        .HasColumnName("ok");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.HasKey("LogId");

                    b.ToTable("email_log");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.FriendLinks", b =>
                {
                    b.Property<long?>("FriendLinksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("friend_links_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("ThemeId")
                        .HasColumnType("bigint")
                        .HasColumnName("theme_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("friend_links_url");

                    b.HasKey("FriendLinksId");

                    b.ToTable("friend_links");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.GroupTeam", b =>
                {
                    b.Property<long?>("GroupTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("group_team_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("UserCount")
                        .HasColumnType("integer")
                        .HasColumnName("user_count");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("GroupTeamId");

                    b.ToTable("group_team");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.GroupTeamUser", b =>
                {
                    b.Property<long?>("GroupTeamUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("group_team_user_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("group_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("GroupTeamUserId");

                    b.ToTable("group_team_user");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Note", b =>
                {
                    b.Property<long?>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("note_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AttachNum")
                        .HasColumnType("integer")
                        .HasColumnName("attach_num");

                    b.Property<int>("CommentNum")
                        .HasColumnType("integer")
                        .HasColumnName("comment_num");

                    b.Property<long?>("ContentId")
                        .HasColumnType("bigint")
                        .HasColumnName("content_id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("created_user_id");

                    b.Property<string>("Desc")
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<bool>("HasSelfDefined")
                        .HasColumnType("boolean")
                        .HasColumnName("has_self_defined");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("text")
                        .HasColumnName("img_src");

                    b.Property<bool>("IsBlog")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blog");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsMarkdown")
                        .HasColumnType("boolean")
                        .HasColumnName("is_markdown");

                    b.Property<bool>("IsPublicShare")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public_share");

                    b.Property<bool>("IsRecommend")
                        .HasColumnType("boolean")
                        .HasColumnName("is_recommend");

                    b.Property<bool>("IsTop")
                        .HasColumnType("boolean")
                        .HasColumnName("is_top");

                    b.Property<bool>("IsTrash")
                        .HasColumnType("boolean")
                        .HasColumnName("is_trash");

                    b.Property<int>("LikeNum")
                        .HasColumnType("integer")
                        .HasColumnName("like_num");

                    b.Property<long?>("NotebookId")
                        .HasColumnType("bigint")
                        .HasColumnName("notebook_id");

                    b.Property<DateTime>("PublicTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("public_time");

                    b.Property<int>("ReadNum")
                        .HasColumnType("integer")
                        .HasColumnName("read_num");

                    b.Property<DateTime>("RecommendTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("recommend_time");

                    b.Property<string>("Src")
                        .HasColumnType("text")
                        .HasColumnName("src");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.Property<long?>("UpdatedUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_user_id");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("text")
                        .HasColumnName("url_title");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<int>("Usn")
                        .HasColumnType("integer")
                        .HasColumnName("usn");

                    b.HasKey("NoteId");

                    b.ToTable("note");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.NoteContent", b =>
                {
                    b.Property<long?>("NoteContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("note_content_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abstract")
                        .HasColumnType("text")
                        .HasColumnName("abstract");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<bool>("IsBlog")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blog");

                    b.Property<bool>("IsHistory")
                        .HasColumnType("boolean")
                        .HasColumnName("is_history");

                    b.Property<long?>("NoteId")
                        .HasColumnType("bigint")
                        .HasColumnName("note_id");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.Property<long?>("UpdatedUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_user_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("NoteContentId");

                    b.ToTable("note_content");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.NoteFile", b =>
                {
                    b.Property<long?>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("file_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AlbumId")
                        .HasColumnType("bigint")
                        .HasColumnName("album_id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<long?>("FromFileId")
                        .HasColumnType("bigint")
                        .HasColumnName("from_file_id");

                    b.Property<bool>("IsDefaultAlbum")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default_album");

                    b.Property<string>("MD5")
                        .HasColumnType("text")
                        .HasColumnName("md5");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("NumberOfFileReferences")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_file_references");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<string>("SHA1")
                        .HasColumnType("text")
                        .HasColumnName("sha1");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("StorageType")
                        .HasColumnType("integer")
                        .HasColumnName("storage_type");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("FileId");

                    b.ToTable("note_file");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.NoteImage", b =>
                {
                    b.Property<long?>("NoteImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("note_image_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("ImageId")
                        .HasColumnType("bigint")
                        .HasColumnName("image_id");

                    b.Property<long?>("NoteId")
                        .HasColumnType("bigint")
                        .HasColumnName("note_id");

                    b.Property<int>("UseCount")
                        .HasColumnType("integer")
                        .HasColumnName("use_count");

                    b.HasKey("NoteImageId");

                    b.ToTable("note_image");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.NoteTag", b =>
                {
                    b.Property<long?>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<bool>("IsBlog")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blog");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<int>("Usn")
                        .HasColumnType("integer")
                        .HasColumnName("usn");

                    b.HasKey("TagId");

                    b.ToTable("note_tag");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.NoteTagMap", b =>
                {
                    b.Property<long?>("NoteTagMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("note_tag_map_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsBlog")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blog");

                    b.Property<long?>("NoteId")
                        .HasColumnType("bigint")
                        .HasColumnName("note_id");

                    b.Property<long?>("NoteTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("note_tag_id");

                    b.HasKey("NoteTagMapId");

                    b.ToTable("note_tag_map");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Notebook", b =>
                {
                    b.Property<long?>("NotebookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("notebook_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<bool>("IsBlog")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blog");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsTrash")
                        .HasColumnType("boolean")
                        .HasColumnName("is_trash");

                    b.Property<bool>("IsWX")
                        .HasColumnType("boolean")
                        .HasColumnName("is_wx");

                    b.Property<int>("NumberNotes")
                        .HasColumnType("integer")
                        .HasColumnName("number_notes");

                    b.Property<long?>("ParentNotebookId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_notebook_Id");

                    b.Property<int>("Seq")
                        .HasColumnType("integer")
                        .HasColumnName("seq");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("text")
                        .HasColumnName("url_title");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<int>("Usn")
                        .HasColumnType("integer")
                        .HasColumnName("usn");

                    b.HasKey("NotebookId");

                    b.ToTable("notebook");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Page", b =>
                {
                    b.Property<long?>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("page_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<int>("CurPage")
                        .HasColumnType("integer")
                        .HasColumnName("cur_page");

                    b.Property<int>("PerPageSize")
                        .HasColumnType("integer")
                        .HasColumnName("per_page_size");

                    b.Property<int>("TotalPage")
                        .HasColumnType("integer")
                        .HasColumnName("total_page");

                    b.HasKey("PageId");

                    b.ToTable("page");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Post", b =>
                {
                    b.Property<long?>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("note_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abstract")
                        .HasColumnType("text")
                        .HasColumnName("abstract");

                    b.Property<int>("CommentNum")
                        .HasColumnType("integer")
                        .HasColumnName("comment_num");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("Desc")
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("text")
                        .HasColumnName("img_src");

                    b.Property<bool>("IsMarkdown")
                        .HasColumnType("boolean")
                        .HasColumnName("is_markdown");

                    b.Property<int>("LikeNum")
                        .HasColumnType("integer")
                        .HasColumnName("like_num");

                    b.Property<DateTime>("PublicTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("public_time");

                    b.Property<int>("ReadNum")
                        .HasColumnType("integer")
                        .HasColumnName("read_num");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("text")
                        .HasColumnName("url_title");

                    b.HasKey("NoteId");

                    b.ToTable("post");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.RandomImage", b =>
                {
                    b.Property<long?>("RandomImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("random_image_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Block")
                        .HasColumnType("boolean")
                        .HasColumnName("block");

                    b.Property<string>("ExternalLink")
                        .HasColumnType("text")
                        .HasColumnName("external_link");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FileNameMD5")
                        .HasColumnType("text")
                        .HasColumnName("file_name_md5");

                    b.Property<string>("FileNameSHA1")
                        .HasColumnType("text")
                        .HasColumnName("file_name_sha1");

                    b.Property<string>("FileSHA1")
                        .HasColumnType("text")
                        .HasColumnName("file_sha1");

                    b.Property<bool>("Is302")
                        .HasColumnType("boolean")
                        .HasColumnName("is_302");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<bool>("Sex")
                        .HasColumnType("boolean")
                        .HasColumnName("sex");

                    b.Property<string>("TypeName")
                        .HasColumnType("text")
                        .HasColumnName("type_name");

                    b.Property<string>("TypeNameMD5")
                        .HasColumnType("text")
                        .HasColumnName("type_name_md5");

                    b.Property<string>("TypeNameSHA1")
                        .HasColumnType("text")
                        .HasColumnName("type_name_sha1");

                    b.HasKey("RandomImageId");

                    b.ToTable("random_image");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.ReportInfo", b =>
                {
                    b.Property<long?>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("report_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CommentId")
                        .HasColumnType("integer")
                        .HasColumnName("comment_id");

                    b.Property<long?>("NoteId")
                        .HasColumnType("bigint")
                        .HasColumnName("note_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("ReportId");

                    b.ToTable("report_info");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.ResolutionLocation", b =>
                {
                    b.Property<long?>("ResolutionLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("resolution_location_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<int>("Speed")
                        .HasColumnType("integer")
                        .HasColumnName("speed");

                    b.Property<long?>("StrategyID")
                        .HasColumnType("bigint")
                        .HasColumnName("strategy_id");

                    b.Property<string>("URL")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.HasKey("ResolutionLocationID");

                    b.ToTable("resolution_location");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.ResolutionStrategy", b =>
                {
                    b.Property<long?>("StrategyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("strategy_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CheckTime")
                        .HasColumnType("integer")
                        .HasColumnName("check_time");

                    b.Property<string>("StrategyKey")
                        .HasColumnType("text")
                        .HasColumnName("strategy_key");

                    b.Property<string>("StrategyName")
                        .HasColumnType("text")
                        .HasColumnName("strategy_name");

                    b.HasKey("StrategyID");

                    b.ToTable("resolution_strategy");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Session", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Captcha")
                        .HasColumnType("text")
                        .HasColumnName("captcha");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<int>("LoginTimes")
                        .HasColumnType("integer")
                        .HasColumnName("login_times");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint")
                        .HasColumnName("session_id");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("session");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.SpamInfo", b =>
                {
                    b.Property<long?>("SpamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("spam_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatData")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creat_data");

                    b.Property<string>("Input")
                        .HasColumnType("text")
                        .HasColumnName("spam_input");

                    b.Property<bool>("ManualCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("manual_check");

                    b.Property<bool>("ManualResult")
                        .HasColumnType("boolean")
                        .HasColumnName("manual_result");

                    b.Property<bool>("Prediction")
                        .HasColumnType("boolean")
                        .HasColumnName("prediction");

                    b.Property<float>("Score")
                        .HasColumnType("real")
                        .HasColumnName("score");

                    b.HasKey("SpamId");

                    b.ToTable("spam_info");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Suggestion", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Addr")
                        .HasColumnType("text")
                        .HasColumnName("addr");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("suggestion");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Tag", b =>
                {
                    b.Property<long?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.HasKey("UserId");

                    b.ToTable("tag");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.TagCount", b =>
                {
                    b.Property<long?>("TagCountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("tag_count_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("tag_count");

                    b.Property<bool>("IsBlog")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blog");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("TagCountId");

                    b.ToTable("tag_count");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Theme", b =>
                {
                    b.Property<long?>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("theme_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Author")
                        .HasColumnType("text")
                        .HasColumnName("author");

                    b.Property<string>("AuthorUrl")
                        .HasColumnType("text")
                        .HasColumnName("author_url");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<string[]>("Info")
                        .HasColumnType("text[]")
                        .HasColumnName("info");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("theme_path");

                    b.Property<string>("Style")
                        .HasColumnType("text")
                        .HasColumnName("style");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("ThemeId");

                    b.ToTable("theme");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Token", b =>
                {
                    b.Property<long?>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("token_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("TokenStr")
                        .HasColumnType("text")
                        .HasColumnName("token_str");

                    b.Property<string>("TokenTag")
                        .HasColumnType("text")
                        .HasColumnName("token_tag");

                    b.Property<int>("TokenType")
                        .HasColumnType("integer")
                        .HasColumnName("token_type");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("TokenId");

                    b.ToTable("token");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.User", b =>
                {
                    b.Property<long?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AccountEndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("account_end_time");

                    b.Property<DateTime>("AccountStartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("account_start_time");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer")
                        .HasColumnName("account_type");

                    b.Property<int>("AttachNum")
                        .HasColumnType("integer")
                        .HasColumnName("attach_num");

                    b.Property<int>("AttachSize")
                        .HasColumnType("integer")
                        .HasColumnName("attach_size");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<long?>("FromUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("from_user_id");

                    b.Property<DateTime>("FullSyncBefore")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("full_sync_before");

                    b.Property<string>("GoogleAuthenticatorSecretKey")
                        .HasColumnType("text")
                        .HasColumnName("google_authenticator_secret_key");

                    b.Property<int>("ImageNum")
                        .HasColumnType("integer")
                        .HasColumnName("image_num");

                    b.Property<int>("ImageSize")
                        .HasColumnType("integer")
                        .HasColumnName("image_size");

                    b.Property<bool>("LeftIsMin")
                        .HasColumnType("boolean")
                        .HasColumnName("left_is_min");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<int>("MaxAttachNum")
                        .HasColumnType("integer")
                        .HasColumnName("max_attach_num");

                    b.Property<int>("MaxAttachSize")
                        .HasColumnType("integer")
                        .HasColumnName("max_attach_size");

                    b.Property<int>("MaxImageNum")
                        .HasColumnType("integer")
                        .HasColumnName("max_image_num");

                    b.Property<int>("MaxImageSize")
                        .HasColumnType("integer")
                        .HasColumnName("max_image_size");

                    b.Property<int>("MaxPerAttachSize")
                        .HasColumnType("integer")
                        .HasColumnName("max_per_attach_size");

                    b.Property<int>("MdEditorWidth")
                        .HasColumnType("integer")
                        .HasColumnName("md_editor_width");

                    b.Property<int>("NoteListWidth")
                        .HasColumnType("integer")
                        .HasColumnName("note_list_width");

                    b.Property<int>("NotebookWidth")
                        .HasColumnType("integer")
                        .HasColumnName("notebook_width");

                    b.Property<int>("PasswordDegreeOfParallelism")
                        .HasColumnType("integer")
                        .HasColumnName("password_degree_of_parallelism");

                    b.Property<string>("PasswordHashAlgorithm")
                        .HasColumnType("text")
                        .HasColumnName("password_hash_algorithm");

                    b.Property<int>("PasswordHashIterations")
                        .HasColumnType("integer")
                        .HasColumnName("password_hash_iterations");

                    b.Property<int>("PasswordMemorySize")
                        .HasColumnType("integer")
                        .HasColumnName("password_memory_size");

                    b.Property<string>("Pwd")
                        .HasColumnType("text")
                        .HasColumnName("pwd");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("user_role");

                    b.Property<string>("Salt")
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<string>("Theme")
                        .HasColumnType("text")
                        .HasColumnName("theme");

                    b.Property<int>("ThirdType")
                        .HasColumnType("integer")
                        .HasColumnName("third_type");

                    b.Property<string>("ThirdUserId")
                        .HasColumnType("text")
                        .HasColumnName("third_user_id");

                    b.Property<string>("ThirdUsername")
                        .HasColumnType("text")
                        .HasColumnName("third_username");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("UsernameRaw")
                        .HasColumnType("text")
                        .HasColumnName("username_raw");

                    b.Property<int>("Usn")
                        .HasColumnType("integer")
                        .HasColumnName("usn");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean")
                        .HasColumnName("verified");

                    b.HasKey("UserId");

                    b.ToTable("user_info");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.UserAccount", b =>
                {
                    b.Property<long?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AccountEndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("account_end_time");

                    b.Property<DateTime>("AccountStartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("account_start_time");

                    b.Property<string>("AccountType")
                        .HasColumnType("text")
                        .HasColumnName("account_type");

                    b.Property<int>("MaxAttachNum")
                        .HasColumnType("integer")
                        .HasColumnName("max_attach_Num");

                    b.Property<int>("MaxAttachSize")
                        .HasColumnType("integer")
                        .HasColumnName("max_attach_size");

                    b.Property<int>("MaxImageNum")
                        .HasColumnType("integer")
                        .HasColumnName("max_image_num");

                    b.Property<int>("MaxImageSize")
                        .HasColumnType("integer")
                        .HasColumnName("max_image_size");

                    b.Property<int>("MaxPerAttachSize")
                        .HasColumnType("integer")
                        .HasColumnName("max_per_attach_size");

                    b.HasKey("UserId");

                    b.ToTable("user_account");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.UserBlog", b =>
                {
                    b.Property<long?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AboutMe")
                        .HasColumnType("text")
                        .HasColumnName("about_me");

                    b.Property<bool>("CanComment")
                        .HasColumnType("boolean")
                        .HasColumnName("can_comment");

                    b.Property<string[]>("CateIds")
                        .HasColumnType("text[]")
                        .HasColumnName("cate_ids");

                    b.Property<string>("CommentType")
                        .HasColumnType("text")
                        .HasColumnName("comment_type");

                    b.Property<string>("Css")
                        .HasColumnType("text")
                        .HasColumnName("css");

                    b.Property<string>("DisqusId")
                        .HasColumnType("text")
                        .HasColumnName("disqus_id");

                    b.Property<string>("Domain")
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<bool>("IsAsc")
                        .HasColumnType("boolean")
                        .HasColumnName("is_asc");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<int>("PerPageSize")
                        .HasColumnType("integer")
                        .HasColumnName("per_page_size");

                    b.Property<string[]>("Singles")
                        .HasColumnType("text[]")
                        .HasColumnName("singles");

                    b.Property<string>("SortField")
                        .HasColumnType("text")
                        .HasColumnName("sort_field");

                    b.Property<string>("Style")
                        .HasColumnType("text")
                        .HasColumnName("style");

                    b.Property<string>("SubDomain")
                        .HasColumnType("text")
                        .HasColumnName("sub_domain");

                    b.Property<string>("SubTitle")
                        .HasColumnType("text")
                        .HasColumnName("sub_title");

                    b.Property<long?>("ThemeId")
                        .HasColumnType("bigint")
                        .HasColumnName("theme_id");

                    b.Property<string>("ThemePath")
                        .HasColumnType("text")
                        .HasColumnName("theme_path");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("UserId");

                    b.ToTable("user_blog");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.UserBlogBase", b =>
                {
                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("SubTitle")
                        .HasColumnType("text")
                        .HasColumnName("sub_title");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Logo");

                    b.ToTable("user_blog_base");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.UserBlogComment", b =>
                {
                    b.Property<long?>("UserBlogCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_blog_comment_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("CanComment")
                        .HasColumnType("boolean")
                        .HasColumnName("can_comment");

                    b.Property<string>("CommentType")
                        .HasColumnType("text")
                        .HasColumnName("comment_type");

                    b.Property<string>("DisqusId")
                        .HasColumnType("text")
                        .HasColumnName("disqus_id");

                    b.HasKey("UserBlogCommentId");

                    b.ToTable("user_blog_comment");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.UserBlogStyle", b =>
                {
                    b.Property<long?>("UserBlogStyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_blog_style_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Css")
                        .HasColumnType("text")
                        .HasColumnName("css");

                    b.Property<string>("Style")
                        .HasColumnType("text")
                        .HasColumnName("style");

                    b.HasKey("UserBlogStyleId");

                    b.ToTable("user_blog_style");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Authorization", b =>
                {
                    b.HasOne("MoreNote.Logic.Entity.User", null)
                        .WithMany("Jurisdiction")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Cate", b =>
                {
                    b.HasOne("MoreNote.Logic.Entity.Cate", null)
                        .WithMany("Children")
                        .HasForeignKey("CateId1");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Cate", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.User", b =>
                {
                    b.Navigation("Jurisdiction");
                });
#pragma warning restore 612, 618
        }
    }
}
