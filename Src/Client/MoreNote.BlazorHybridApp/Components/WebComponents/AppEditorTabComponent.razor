@namespace MoreNote.BlazorHybridApp.Components.WebComponents


<Tabs DefaultActiveKey="1" Type="@TabType.EditableCard" OnAddClick="OnAddClick" OnClose="OnTabClose" @bind-ActiveKey="activeKey">
    @foreach (var pane in panes)
    {
        <TabPane Key="@pane.Key" Tab="@pane.Title" Closable="@pane.Closable">
         <TabTemplate>
            <span><Icon Type=@pane.icon />@pane.Title</span>
        </TabTemplate>
        <ChildContent>
             <Vditor.Editor @ref="editor" 
                Value=@pane.Content
                @bind-Html="html" 
                Mode="wysiwyg" 
                Height="600" 
                Width="1200"
                MinHeight="500" 
                 OnToolbarButtonClick="OnToolbarButtonClick"  />

        </ChildContent>
       
        </TabPane>
    }
</Tabs>

<style>
    .app-tab-container {
        height: 100%;
        width: 100%;
      
    }

    .app-editor-container {
        display: block;
        min-height: 600px;
        height: 100%;
        width: 100%;
    }

    .am-tab-content {
        display: block;
        height: 100%;
        width: 100%;
    }

</style>
@code {
    
    private int newTabIndex;

    public record Pane(string Title, string Content, string Key, bool Closable ,string icon);
        List<Pane> panes = new List<Pane>()
    {
        new("Tab 1", "Content of Tab Pane 1","1",true,"android"),
        new("Tab 2", "Content of Tab Pane 2","2",true,"apple"),
        new("Tab 3", "Content of Tab Pane 3","3",false,"apple"),
    };
       private void OnAddClick()
    {
        var key = panes.Count + 1;
        activeKey = $"newTab{newTabIndex++}";
        panes.Add(new Pane($"Tab {key}", $"Content of Tab Pane {key}", activeKey,true,"apple"));
    }
    string? Content { get; set; } = "Hello World!!!";
    string activeKey { get; set; } = "1";

    void OnTabChange(string key)
    {
        Console.WriteLine($"tab change:{key}");
    }

    string value = "Hello Blazor!";
    string html;

    Editor editor;


 
    async Task Click()
    {
        var value = await editor.GetValueAsync();
        Console.WriteLine(value);
    }

    void Rendererd()
    {
        Console.WriteLine("rendererd!");
    }

    void OnToolbarButtonClick(string name)
    {
        value += $"\r\ncustom button {name} was clicked.";
    }
    void OnTabClose(string key)
    {
        Console.WriteLine($"tab close:{key}");
    }



}
