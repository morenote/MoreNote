@namespace MoreNote.BlazorHybridApp.Components.WebComponents

<div class="button-area">
    @foreach(string item in icons){
    <Button Type="@ButtonType.Dashed"  Shape="@ButtonShape.Circle" >
         <Icon Type=@item Theme="outline"/> 
      </Button>
    }
     

</div>
<div class="tree-area">
   <Tree TItem="Data"
          DataSource="_datas" @ref="_tree"
          ShowLine="true"
          TitleExpression="x => x.DataItem.Title"
          ChildrenExpression="x => x.DataItem.Childs"
          IsLeafExpression="x => x.TreeLevel > 2"
          OnNodeLoadDelayAsync="OnNodeLoadDelayAsync">
      
      
      </Tree>
</div>



@code {
    string[] icons = new string[] { "book", // 项目
          "search", // 搜索
          "branches", // 分支
          "file-zip", // 文件
          "key", // 密钥
          "function", // 函数
          "delete" // 删除
      };
   public record Data(string Title)
    {
        public List<Data> Childs { get; set; } = new List<Data>();
    }

    List<Data> _datas = new() { new("A"), new("B"), new("C") };

    Tree<Data> _tree;

    private void ExpandAll()
    {
        _tree.ExpandAll();
    }

    private void ExpandAllChild()
    {
        _tree.ExpandAll(n => n.Title == "C");
    }

    public async Task OnNodeLoadDelayAsync(TreeEventArgs<Data> args)
    {
        if (args.Node.TreeLevel < 3)
        {
            await Task.Delay(200);//模拟异步执行

            var dataItem = ((Data)args.Node.DataItem);
            dataItem.Childs.Clear();
            dataItem.Childs.AddRange(new List<Data>() { new Data($"{dataItem.Title}-1"), new Data($"{dataItem.Title}-2") });
        }
    }
}
