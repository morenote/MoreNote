// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoreNote.Logic.DB;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MoreNote.Logic.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200621122307_initDB")]
    partial class initDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("MoreNote.Logic.Entity.AccessRecords", b =>
                {
                    b.Property<long>("AccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AccessTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IP")
                        .HasColumnType("text");

                    b.Property<string>("Referrer")
                        .HasColumnType("text");

                    b.Property<string>("RemoteIpAddress")
                        .HasColumnType("text");

                    b.Property<string>("RemotePort")
                        .HasColumnType("text");

                    b.Property<string>("RequestHeader")
                        .HasColumnType("text");

                    b.Property<long>("TimeInterval")
                        .HasColumnType("bigint");

                    b.Property<long>("UnixTime")
                        .HasColumnType("bigint");

                    b.Property<string>("X_Forwarded_For")
                        .HasColumnType("text");

                    b.Property<string>("X_Real_IP")
                        .HasColumnType("text");

                    b.Property<string>("url")
                        .HasColumnType("text");

                    b.HasKey("AccessId");

                    b.ToTable("AccessRecords");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Album", b =>
                {
                    b.Property<long>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.HasKey("AlbumId");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.AppInfo", b =>
                {
                    b.Property<long>("appid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("appautor")
                        .HasColumnType("text");

                    b.Property<string>("appdetail")
                        .HasColumnType("text");

                    b.Property<string>("appdownurl")
                        .HasColumnType("text");

                    b.Property<string>("applogourl")
                        .HasColumnType("text");

                    b.Property<string>("appname")
                        .HasColumnType("text");

                    b.Property<string>("apppackage")
                        .HasColumnType("text");

                    b.Property<string>("appsize")
                        .HasColumnType("text");

                    b.Property<string>("appversion")
                        .HasColumnType("text");

                    b.Property<string[]>("imglist")
                        .HasColumnType("text[]");

                    b.HasKey("appid");

                    b.ToTable("AppInfo");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.AttachInfo", b =>
                {
                    b.Property<long>("AttachId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("NoteId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<long>("UploadUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("AttachId");

                    b.ToTable("AttachInfo");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Authorization", b =>
                {
                    b.Property<long>("AuthorizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.HasKey("AuthorizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Authorization");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.BlogComment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Allow")
                        .HasColumnType("boolean");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LikeNum")
                        .HasColumnType("integer");

                    b.Property<long[]>("LikeUserIds")
                        .HasColumnType("bigint[]");

                    b.Property<long>("NoteId")
                        .HasColumnType("bigint");

                    b.Property<string>("ToCommentId")
                        .HasColumnType("text");

                    b.Property<long>("ToUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CommentId");

                    b.ToTable("BlogComment");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.BlogCommentPublic", b =>
                {
                    b.Property<long>("BlogCommentPublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsILikeIt")
                        .HasColumnType("boolean");

                    b.HasKey("BlogCommentPublicId");

                    b.ToTable("BlogCommentPublic");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.BlogInfoCustom", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CommentType")
                        .HasColumnType("text");

                    b.Property<string>("Domain")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("OpenComment")
                        .HasColumnType("text");

                    b.Property<string>("SubDomain")
                        .HasColumnType("text");

                    b.Property<string>("SubTitle")
                        .HasColumnType("text");

                    b.Property<string>("ThemeId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UserLogo")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("BlogInfoCustom");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.BlogItem", b =>
                {
                    b.Property<long>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abstract")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<bool>("HasMore")
                        .HasColumnType("boolean");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("NoteId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogItem");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.BlogLike", b =>
                {
                    b.Property<long>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("NoteId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LikeId");

                    b.ToTable("BlogLike");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.BlogSingle", b =>
                {
                    b.Property<long>("SingleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("SingleId");

                    b.ToTable("BlogSingle");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.BlogStat", b =>
                {
                    b.Property<long>("NodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CommentNum")
                        .HasColumnType("integer");

                    b.Property<int>("LikeNum")
                        .HasColumnType("integer");

                    b.Property<int>("ReadNum")
                        .HasColumnType("integer");

                    b.HasKey("NodeId");

                    b.ToTable("BlogStat");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Cate", b =>
                {
                    b.Property<long>("CateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("CateId1")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentCateId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("text");

                    b.HasKey("CateId");

                    b.HasIndex("CateId1");

                    b.ToTable("Cate");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Config", b =>
                {
                    b.Property<long>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ValueStr")
                        .HasColumnType("text");

                    b.HasKey("ConfigId");

                    b.ToTable("Config");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.EmailLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Msg")
                        .HasColumnType("text");

                    b.Property<bool>("Ok")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("LogId");

                    b.ToTable("EmailLog");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.FriendLinks", b =>
                {
                    b.Property<long>("FriendLinksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ThemeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("FriendLinksId");

                    b.ToTable("FriendLinks");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.GoodOrder", b =>
                {
                    b.Property<long>("GoodOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NativeRequestMessage")
                        .HasColumnType("text");

                    b.Property<string>("NativeResponseMessage")
                        .HasColumnType("text");

                    b.Property<bool>("Notify")
                        .HasColumnType("boolean");

                    b.Property<string>("NotifyResponseMessage")
                        .HasColumnType("text");

                    b.Property<bool>("PayStatus")
                        .HasColumnType("boolean");

                    b.Property<bool>("Refund")
                        .HasColumnType("boolean");

                    b.Property<string>("attch")
                        .HasColumnType("text");

                    b.Property<string>("body")
                        .HasColumnType("text");

                    b.Property<string>("mchid")
                        .HasColumnType("text");

                    b.Property<string>("notify_url")
                        .HasColumnType("text");

                    b.Property<string>("openid")
                        .HasColumnType("text");

                    b.Property<string>("out_trade_no")
                        .HasColumnType("text");

                    b.Property<string>("payjs_order_id")
                        .HasColumnType("text");

                    b.Property<int>("total_fee")
                        .HasColumnType("integer");

                    b.Property<string>("transaction_id")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.HasKey("GoodOrderId");

                    b.ToTable("GoodOrder");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Group", b =>
                {
                    b.Property<long>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("UserCount")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("GroupId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.GroupUser", b =>
                {
                    b.Property<long>("GroupUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("GroupUserId");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Note", b =>
                {
                    b.Property<long>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AttachNum")
                        .HasColumnType("integer");

                    b.Property<int>("CommentNum")
                        .HasColumnType("integer");

                    b.Property<long>("ContentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Desc")
                        .HasColumnType("text");

                    b.Property<bool>("HasSelfDefined")
                        .HasColumnType("boolean");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("text");

                    b.Property<bool>("IsBlog")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMarkdown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublicShare")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecommend")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTop")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrash")
                        .HasColumnType("boolean");

                    b.Property<int>("LikeNum")
                        .HasColumnType("integer");

                    b.Property<long>("NotebookId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PublicTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ReadNum")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RecommendTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Src")
                        .HasColumnType("text");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Usn")
                        .HasColumnType("integer");

                    b.HasKey("NoteId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.NoteContent", b =>
                {
                    b.Property<long>("NoteContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abstract")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsBlog")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHistory")
                        .HasColumnType("boolean");

                    b.Property<long>("NoteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("NoteContentId");

                    b.ToTable("NoteContent");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.NoteFile", b =>
                {
                    b.Property<long>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AlbumId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("FromFileId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefaultAlbum")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfFileReferences")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("MD5")
                        .HasColumnType("text");

                    b.Property<string>("SHA1")
                        .HasColumnType("text");

                    b.HasKey("FileId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.NoteImage", b =>
                {
                    b.Property<long>("NoteImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<long>("NoteId")
                        .HasColumnType("bigint");

                    b.Property<int>("userCount")
                        .HasColumnType("integer");

                    b.HasKey("NoteImageId");

                    b.ToTable("NoteImage");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.NoteTag", b =>
                {
                    b.Property<long>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Tag")
                        .HasColumnType("text");

                    b.Property<long?>("TagUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Usn")
                        .HasColumnType("integer");

                    b.HasKey("TagId");

                    b.HasIndex("TagUserId");

                    b.ToTable("NoteTag");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Notebook", b =>
                {
                    b.Property<long>("NotebookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsBlog")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrash")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWX")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberNotes")
                        .HasColumnType("integer");

                    b.Property<long>("ParentNotebookId")
                        .HasColumnType("bigint");

                    b.Property<int>("Seq")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Usn")
                        .HasColumnType("integer");

                    b.HasKey("NotebookId");

                    b.ToTable("Notebook");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Page", b =>
                {
                    b.Property<long>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("CurPage")
                        .HasColumnType("integer");

                    b.Property<int>("PerPageSize")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPage")
                        .HasColumnType("integer");

                    b.HasKey("PageId");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Post", b =>
                {
                    b.Property<long>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abstract")
                        .HasColumnType("text");

                    b.Property<int>("CommentNum")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Desc")
                        .HasColumnType("text");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("text");

                    b.Property<bool>("IsMarkdown")
                        .HasColumnType("boolean");

                    b.Property<int>("LikeNum")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublicTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ReadNum")
                        .HasColumnType("integer");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("text");

                    b.HasKey("NoteId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.RandomImage", b =>
                {
                    b.Property<long>("RandomImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Block")
                        .HasColumnType("boolean");

                    b.Property<bool>("Delete")
                        .HasColumnType("boolean");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileNameMD5")
                        .HasColumnType("text");

                    b.Property<string>("FileNameSHA1")
                        .HasColumnType("text");

                    b.Property<string>("FileSHA1")
                        .HasColumnType("text");

                    b.Property<bool>("Sex")
                        .HasColumnType("boolean");

                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.Property<string>("TypeNameMD5")
                        .HasColumnType("text");

                    b.Property<string>("TypeNameSHA1")
                        .HasColumnType("text");

                    b.HasKey("RandomImageId");

                    b.ToTable("RandomImage");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.ReportInfo", b =>
                {
                    b.Property<long>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<long>("NoteId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ReportId");

                    b.ToTable("ReportInfo");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Captcha")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LoginTimes")
                        .HasColumnType("integer");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Suggestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Addr")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Suggestion");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Tag", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("UserId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.TagCount", b =>
                {
                    b.Property<long>("TagCountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBlog")
                        .HasColumnType("boolean");

                    b.Property<string>("Tag")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("TagCountId");

                    b.ToTable("TagCount");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Theme", b =>
                {
                    b.Property<long>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("AuthorUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string[]>("Info")
                        .HasColumnType("text[]");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("Style")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("ThemeId");

                    b.ToTable("Theme");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Token", b =>
                {
                    b.Property<long>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("TokenStr")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("tokenTag")
                        .HasColumnType("text");

                    b.HasKey("TokenId");

                    b.ToTable("Token");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AccountEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("AccountStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<int>("AttachNum")
                        .HasColumnType("integer");

                    b.Property<int>("AttachSize")
                        .HasColumnType("integer");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<long>("FromUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FullSyncBefore")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<int>("ImageNum")
                        .HasColumnType("integer");

                    b.Property<int>("ImageSize")
                        .HasColumnType("integer");

                    b.Property<bool>("LeftIsMin")
                        .HasColumnType("boolean");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<int>("MaxAttachNum")
                        .HasColumnType("integer");

                    b.Property<int>("MaxAttachSize")
                        .HasColumnType("integer");

                    b.Property<int>("MaxImageNum")
                        .HasColumnType("integer");

                    b.Property<int>("MaxImageSize")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPerAttachSize")
                        .HasColumnType("integer");

                    b.Property<int>("MdEditorWidth")
                        .HasColumnType("integer");

                    b.Property<int>("NoteListWidth")
                        .HasColumnType("integer");

                    b.Property<int>("NotebookWidth")
                        .HasColumnType("integer");

                    b.Property<string>("Pwd")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<string>("Theme")
                        .HasColumnType("text");

                    b.Property<int>("ThirdType")
                        .HasColumnType("integer");

                    b.Property<string>("ThirdUserId")
                        .HasColumnType("text");

                    b.Property<string>("ThirdUsername")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("UsernameRaw")
                        .HasColumnType("text");

                    b.Property<int>("Usn")
                        .HasColumnType("integer");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("UserId");

                    b.HasIndex("GroupId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.UserAccount", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AccountEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("AccountStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AccountType")
                        .HasColumnType("text");

                    b.Property<int>("MaxAttachNum")
                        .HasColumnType("integer");

                    b.Property<int>("MaxAttachSize")
                        .HasColumnType("integer");

                    b.Property<int>("MaxImageNum")
                        .HasColumnType("integer");

                    b.Property<int>("MaxImageSize")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPerAttachSize")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.UserBlog", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AboutMe")
                        .HasColumnType("text");

                    b.Property<bool>("CanComment")
                        .HasColumnType("boolean");

                    b.Property<string[]>("CateIds")
                        .HasColumnType("text[]");

                    b.Property<string>("CommentType")
                        .HasColumnType("text");

                    b.Property<string>("Css")
                        .HasColumnType("text");

                    b.Property<string>("DisqusId")
                        .HasColumnType("text");

                    b.Property<string>("Domain")
                        .HasColumnType("text");

                    b.Property<bool>("IsAsc")
                        .HasColumnType("boolean");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<int>("PerPageSize")
                        .HasColumnType("integer");

                    b.Property<string[]>("Singles")
                        .HasColumnType("text[]");

                    b.Property<string>("SortField")
                        .HasColumnType("text");

                    b.Property<string>("Style")
                        .HasColumnType("text");

                    b.Property<string>("SubDomain")
                        .HasColumnType("text");

                    b.Property<string>("SubTitle")
                        .HasColumnType("text");

                    b.Property<long>("ThemeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ThemePath")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("UserBlog");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.UserBlogBase", b =>
                {
                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("SubTitle")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Logo");

                    b.ToTable("UserBlogBase");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.UserBlogComment", b =>
                {
                    b.Property<long>("UserBlogCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("CanComment")
                        .HasColumnType("boolean");

                    b.Property<string>("CommentType")
                        .HasColumnType("text");

                    b.Property<string>("DisqusId")
                        .HasColumnType("text");

                    b.HasKey("UserBlogCommentId");

                    b.ToTable("UserBlogComment");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.UserBlogStyle", b =>
                {
                    b.Property<long>("UserBlogStyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Css")
                        .HasColumnType("text");

                    b.Property<string>("Style")
                        .HasColumnType("text");

                    b.HasKey("UserBlogStyleId");

                    b.ToTable("UserBlogStyle");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Authorization", b =>
                {
                    b.HasOne("MoreNote.Logic.Entity.User", null)
                        .WithMany("Jurisdiction")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.BlogItem", b =>
                {
                    b.HasOne("MoreNote.Logic.Entity.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.Cate", b =>
                {
                    b.HasOne("MoreNote.Logic.Entity.Cate", null)
                        .WithMany("Children")
                        .HasForeignKey("CateId1");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.NoteTag", b =>
                {
                    b.HasOne("MoreNote.Logic.Entity.Tag", null)
                        .WithMany("Tags")
                        .HasForeignKey("TagUserId");
                });

            modelBuilder.Entity("MoreNote.Logic.Entity.User", b =>
                {
                    b.HasOne("MoreNote.Logic.Entity.Group", null)
                        .WithMany("Users")
                        .HasForeignKey("GroupId");
                });
#pragma warning restore 612, 618
        }
    }
}
